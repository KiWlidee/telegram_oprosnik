from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove

from datetime import datetime

import keyboards as kb

router = Router()

results = []

username = ""

@router.message(Command("test"))
async def test_cmd(message: types.Message):
    print("‚úÖ TEST –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
    await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

def writing_logs(question, message):
    print('–ó–∞–ø–∏—Å—ã–≤–∞—é –ª–æ–≥–∏...')
    with open("C:\\vscodepj\\primer\\opr_logs.txt", "a", encoding="utf-8") as f:
        time = str(datetime.now())
        f.write(f"–í—Ä–µ–º—è: {time[:19]}.  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {username}. –í–æ–ø—Ä–æ—Å: {question} - –û—Ç–≤–µ—Ç: {message}\n")

@router.message(Command("start"))
async def start(message: types.Message):
    global username
    username = message.from_user.full_name
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å–Ω–∏–∫!", reply_markup=kb.start_menu)
    with open("opr_logs.txt", "a", encoding="utf-8") as f:
        f.write(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {username}")

@router.message(F.text == "‚≠ê –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
async def opr_start(message: types.Message):
    await message.answer("üéÆ –ò–≥—Ä–∞–µ—Ç–µ –ª–∏ –≤—ã –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã–µ –∏–≥—Ä—ã?", reply_markup=kb.first_question)

@router.message(F.text == "‚úÖ –î–∞, –∏–≥—Ä–∞—é.")
async def first_question_answer(message: types.Message):
    writing_logs("üéÆ –ò–≥—Ä–∞–µ—Ç–µ –ª–∏ –≤—ã –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã–µ –∏–≥—Ä—ã?", "‚úÖ –î–∞, –∏–≥—Ä–∞—é.")
    await message.answer("‚è≥ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?", reply_markup=kb.second_question)
    results.append("‚úÖ –í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã–µ –∏–≥—Ä—ã.")

@router.message(F.text == "‚ùå –ù–µ—Ç, –Ω–µ –∏–≥—Ä–∞—é.")
async def first_question_answer(message: types.Message):
    writing_logs("üéÆ –ò–≥—Ä–∞–µ—Ç–µ –ª–∏ –≤—ã –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã–µ –∏–≥—Ä—ã?", "‚ùå –ù–µ—Ç, –Ω–µ –∏–≥—Ä–∞—é.")
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?", reply_markup=kb.second_question)
    results.append("‚ùå –í—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã–µ –∏–≥—Ä—ã.")

@router.message(F.text == "üïí –û—Ç 0 –¥–æ 2 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
async def second_question_answer(message: types.Message):
    writing_logs("‚è≥ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?", "üïí –û—Ç 0 –¥–æ 2 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
    await message.answer("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏ –í—ã –≤–∏–¥–µ–æ –Ω–∞ Youtube?", 
                         reply_markup=kb.third_question)
    results.append("üïí –í—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –æ—Ç 0 –¥–æ 2 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.")

@router.message(F.text == "üïí –û—Ç 2 –¥–æ 4 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
async def second_question_answer(message: types.Message):
    writing_logs("‚è≥ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?", "üïí –û—Ç 2 –¥–æ 4 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
    await message.answer("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏ –í—ã –≤–∏–¥–µ–æ –Ω–∞ Youtube?", 
                         reply_markup=kb.third_question)
    results.append("üïí –í—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –æ—Ç 2 –¥–æ 4 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.")

@router.message(F.text == "üïí –û—Ç 4 –¥–æ 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
async def second_question_answer(message: types.Message):
    writing_logs("‚è≥ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?", "üïí –û—Ç 4 –¥–æ 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
    await message.answer("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏ –í—ã –≤–∏–¥–µ–æ –Ω–∞ Youtube?", 
                         reply_markup=kb.third_question)
    results.append("üïí –í—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –æ—Ç 4 –¥–æ 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.")
    
@router.message(F.text == "üïí –û—Ç 8 –¥–æ 12+ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
async def second_question_answer(message: types.Message):
    writing_logs("‚è≥ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?", "üïí –û—Ç 8 –¥–æ 12+ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
    await message.answer("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏ –í—ã –≤–∏–¥–µ–æ –Ω–∞ Youtube?", 
                         reply_markup=kb.third_question)
    results.append("üïí –í—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –æ—Ç 8 –¥–æ 12+ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.")

@router.message(F.text == "‚úÖ –î–∞, —Å–º–æ—Ç—Ä—é.")
async def third_question_answer(message: types.Message):
    writing_logs("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏ –í—ã –≤–∏–¥–µ–æ –Ω–∞ Youtube?", "‚úÖ –î–∞, —Å–º–æ—Ç—Ä—é.")
    await message.answer("‚ñ∂Ô∏è –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —É–¥–µ–ª—è–µ—Ç–µ –Ω–∞ –ø—Ä–æ–º–æ—Ç—Ä –≤–∏–¥–µ–æ –Ω–∞ Youtube?", 
                         reply_markup=kb.third_question_yes)

@router.message(F.text == "üïí –û—Ç 0 –¥–æ 3 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
async def four_yt_question_answer(message: types.Message):
    writing_logs("‚ñ∂Ô∏è –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —É–¥–µ–ª—è–µ—Ç–µ –Ω–∞ –ø—Ä–æ–º–æ—Ç—Ä –≤–∏–¥–µ–æ –Ω–∞ Youtube?", "üïí –û—Ç 0 –¥–æ 3 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
    await message.answer("üé• –õ—é–±–∏—Ç–µ –ª–∏ –≤—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã?", reply_markup=kb.four_question)
    results.append("üé• –í—ã —É–¥–µ–ª—è–µ—Ç–µ –æ—Ç 0 –¥–æ 3 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ–º–æ—Ç—Ä –≤–∏–¥–µ–æ –Ω–∞ Youtube.")

@router.message(F.text == "üïí –û—Ç 3 –¥–æ 6 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
async def four_yt_question_answer(message: types.Message):
    writing_logs("‚ñ∂Ô∏è –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —É–¥–µ–ª—è–µ—Ç–µ –Ω–∞ –ø—Ä–æ–º–æ—Ç—Ä –≤–∏–¥–µ–æ –Ω–∞ Youtube?", "üïí –û—Ç 3 –¥–æ 6 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
    await message.answer("üé• –õ—é–±–∏—Ç–µ –ª–∏ –≤—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã?", reply_markup=kb.four_question)
    results.append("üé• –í—ã —É–¥–µ–ª—è–µ—Ç–µ –æ—Ç 3 –¥–æ 6 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ–º–æ—Ç—Ä –≤–∏–¥–µ–æ –Ω–∞ Youtube.")

@router.message(F.text == "üïí –û—Ç 6 –¥–æ 12+ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
async def four_yt_question_answer(message: types.Message):
    writing_logs("‚ñ∂Ô∏è –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —É–¥–µ–ª—è–µ—Ç–µ –Ω–∞ –ø—Ä–æ–º–æ—Ç—Ä –≤–∏–¥–µ–æ –Ω–∞ Youtube?", "üïí –û—Ç 6 –¥–æ 12+ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.")
    await message.answer("üé• –õ—é–±–∏—Ç–µ –ª–∏ –≤—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã?", reply_markup=kb.four_question)
    results.append("üé• –í—ã —É–¥–µ–ª—è–µ—Ç–µ –æ—Ç 6 –¥–æ 12+ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ–º–æ—Ç—Ä –≤–∏–¥–µ–æ –Ω–∞ Youtube.")

@router.message(F.text == "‚ùå –ù–µ—Ç, –Ω–µ —Å–º–æ—Ç—Ä—é.")
async def third_question_answer(message: types.Message):
    writing_logs("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏ –í—ã –≤–∏–¥–µ–æ –Ω–∞ Youtube?", "‚ùå –ù–µ—Ç, –Ω–µ —Å–º–æ—Ç—Ä—é.")
    await message.answer("üé• –õ—é–±–∏—Ç–µ –ª–∏ –≤—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã?", reply_markup=kb.four_question)
    results.append("üé• –í—ã –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç–µ Youtube")

@router.message(F.text == "üíú –ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã!")
async def four_question_answer(message: types.Message):
    writing_logs("üé• –õ—é–±–∏—Ç–µ –ª–∏ –≤—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã?", "üíú –ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã!")
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", 
                         reply_markup=kb.five_question)
    results.append("üíú –í—ã –ª—é–±–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã.")
    
@router.message(F.text == "‚ùå –ú–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ")
async def four_question_answer(message: types.Message):
    writing_logs("üé• –õ—é–±–∏—Ç–µ –ª–∏ –≤—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã?", "‚ùå –ú–Ω–µ —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ")
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", 
                         reply_markup=kb.five_question)
    results.append("‚ùå –í–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å–º–æ—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã.")

@router.message(F.text == "‚úÖ –î–∞, –∫–æ–Ω–µ—á–Ω–æ!")
async def result(message: types.Message):
    writing_logs("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", "‚úÖ –î–∞, –∫–æ–Ω–µ—á–Ω–æ!")
    for i in results:
        await message.answer(i)
    await message.answer("–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞?", reply_markup=kb.again)

@router.message(F.text == "üîÑ")
async def restart_test(message: types.Message):
    await start(message)

@router.message(F.text == "‚ùå")
async def cancel_restart(message: types.Message):
    await message.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", 
                         reply_markup=ReplyKeyboardRemove())